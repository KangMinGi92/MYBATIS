<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="employee">
	<resultMap id="empMap" type="emp">
		<!--
			 DB데이터가 1:1관계일때는  -> association 태그를 이용해서 연결
			 result태그의 *마지막*에 사용
			 id태그가 설정되어 있어야 한다.
		 -->
		<id property="empId" column="emp_id"/>
		<result property="empName" column="EMP_NAME"/>
		<result property="empNo" column="EMP_NO"/>
		<!-- <result property="deptCode" column="DEPT_CODE"/> -->
		<result property="jobCode" column="JOB_CODE"/>
		<result property="salLevel" column="SAL_LEVEL"/>
		<result property="managerId" column="MANAGER_ID"/>
		<result property="hireDate" column="HIRE_DATE"/>
		<result property="entDate" column="ENT_DATE"/>
		<result property="entYn" column="ENT_YN"/>
		<!--
			association 사용하기 전에는 필드명이랑 컬럼명이 같으면 생략해도 됐지만,
			association 태그를 사용하면 매칭이 안되기 때문에 전부 기재해줘야한다.
		  -->
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="bonus" column="bonus"/>
		<result property="salary" column="salary"/>
		
<!-- 	기존JOin 했던 내가 했던 방식	
		<result property="deptId" column="DEPT_ID"/>
		<result property="locationId" column="LOCATION_ID"/>
		<result property="deptTitle" column="DEPT_TITLE"/>
		<result property="jobName" column="JOB_NAME"/> -->
		<association property="dept" resultMap="departmentMap"/>
	</resultMap>
	<resultMap id="departmentMap" type="department">
		<id property="deptId" column="dept_id"/>
		<result property="deptTitle" column="dept_title"/>
		<result property="locationId" column="location_id"/>
		<!--1:다 관계일때는 collection 태그 사용  -->
		<collection property="employees" resultMap="empMap"/>
	</resultMap>
	
	<select id="selectAllDept" resultMap="departmentMap">
		SELECT * FROM DEPARTMENT LEFT JOIN EMPLOYEE ON DEPT_CODE=DEPT_ID 
	</select>
	
	<select id="selectAllEmp" resultMap="empMap">
		SELECT * FROM EMPLOYEE
	</select>
	<!--
		파라미터값을 가져올때
		#{} : setType()값을 대입 -> 자료형에 맞는 리터럴을 대입 -> 'emp_id'  	
		${} : 문자열처리하는 표현 -> emp_id
	-->
	<select id="searchEmp" resultMap="empMap" parameterType="map">
		SELECT * FROM
			(SELECT E.*,
				DECODE(SUBSTR(EMP_NO,8,1),'1','M','2','F','3','M','4','F') AS GENDER FROM EMPLOYEE E) 
			JOIN DEPARTMENT ON DEPT_CODE=DEPT_ID
			JOIN JOB USING(JOB_CODE)
		WHERE 1=1
		<!--무조건 TRUE 인 값을 강제로 삽입해서 <where>태그 나 <trim>태그를 안써줄수도 있다.  -->
		<!-- <where> -->
		<!-- <trim prefix="WHERE" prefixOverrides="AND|OR"> --> 
		<!--map에 있는 keyword값이 null이 아니고, 공란이 아닐경우 분기처리 jsp 폼태그 안에 있는 값은 입력하지 않아도 공란으로 넘어오기 때문에 처리해줘야함-->
		<if test="keyword!=null and keyword!=''">
			AND ${type} LIKE '%${keyword}%'
		</if>
		<if test="gender!=null and gender!=''">
		 	AND GENDER = #{gender}
		 </if>
		 <if test="salary!=null and salary!='' and salFlag!=null and salFlag!=''">
<!-- 		<if test="salFlag eq 'ge'">
			 	AND SALARY >= #{salary}
			 	AND SALARY &gt;= #{salary}
			 </if>
			 <if test="salFlag=='le'">
			 	AND SALARY <![CDATA[<=]]> #{salary}
			 	AND SALARY &lt;= #{salary}
			 </if> -->
			 <choose>
			 	<when test="salFlag eq 'ge'">
			 			AND SALARY &gt;= #{salary}
			 	</when>
			 	<otherwise>
			 			AND SALARY &lt;= #{salary}
			 	</otherwise>
			 </choose>
		 </if>
		 <if test="deptCodes!=null and deptCodes!=''">
		 	AND DEPT_CODE IN 
		 	<!--
		 		foreach문을 사용할 수 있다.
		 		속성 
		 		collection : 배열방식의 데이터
		 		item : 배열의 데이터를 저장하는 변수명
		 		open : 반복을 시작할때 출력할 값을 설정
		 		close : 반복을 끝났을때 출력할 값을 설정
		 		separator : 반복할때마다 출력할 값을 설정(구분자)
		 		index : 배열의 인덱스 번호를 저장하는 변수
		 	  -->
			 <foreach item="d" collection="deptCodes" open="(" close=")" separator=",">
			 	#{d}
			 </foreach>
		 </if>
		 <if test="jobCodes!=null and jobCodes!=''">
		 	AND JOB_CODE IN
		 	<foreach item="j" collection="jobCodes" open="(" close=")" separator=",">
		 		#{j}
		 	</foreach>
		 </if>
		 <if test="hireDate!=null and hireDate!=''">
			 <choose>
		 	<when test="hireFlag eq 'ge'">
		 			AND HIRE_DATE &gt;= #{hireDate}
		 	</when>
		 	<otherwise>
		 			AND HIRE_DATE &lt;= #{hireDate}
		 	</otherwise>
			 </choose>
		 </if>
		<!--  </trim> -->
		 <!-- </where> -->
	</select>
	
<!-- 	
	<resultMap id="employeeMap" type="com.mybatis.model.vo.Employee">
		<id property="empId" column="EMP_ID"/>
		<result property="empName" column="EMP_NAME"/>
		<result property="empNo" column="EMP_NO"/>
		<result property="email" column="EMAIL"/>
		<result property="phone" column="PHONE"/>
		<result property="deptCode" column="DEPT_CODE"/>
		<result property="jobCode" column="JOB_CODE"/>
		<result property="salLevel" column="SAL_LEVEL"/>
		<result property="salary" column="SALARY"/>
		<result property="bonus" column="BONUS"/>
		<result property="managerId" column="MANAGER_ID"/>
		<result property="hireDate" column="HIRE_DATE"/>
		<result property="entDate" column="ENT_DATE"/>
		<result property="entYn" column="ENT_YN"/>
	</resultMap>
	<select id="selectEmployeeCount" resultType="_int">
		SELECT COUNT(*) FROM EMPLOYEE	
	</select>
	<select id="SelectEmployeeAll" resultMap="employeeMap">
		SELECT * FROM EMPLOYEE ORDER BY EMP_NAME DESC
	</select> -->
</mapper>
