<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 
	mapper태그에 namespace속성을 설정해야한다.
	namespace값은 session객체가 sql문을 메소드에 의해 실행할때
	사용하는 mapper구분 값이다.
-->
<mapper namespace="student">
	<!--  
		실행할 sql문에 맞는 태그를 선언하면됨.
		<select>, <insert>, <update>, <delete>
		sql문 시작태그와 끝태그사이에 작성, ;를 작성하지 않는다.
	-->
	<insert id="insertStudent">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,
		'유병승','0102341234','YOO@YOO.COM','경기도 시흥시',DEFAULT)
	</insert>
	<!-- 
		메소드 실행시 매개변수가 있는 경우에 sql태그에 parameterType속성을 이용해서 매개변수 타입을 설정 
		parameter값은 #{매개변수명}로 전달받을 수 있다.
	-->
	<insert id="insertStudentByName" parameterType="string">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,
		#{name},'0102341234','YOO@YOO.COM','경기도 시흥시',DEFAULT)
	</insert>
	<!-- type을 작성할때 클래스를 작성하려면 패키지명까지 작성을 해야한다. -->
	<insert id="insertStudentAll" parameterType="com.mybatis.model.vo.Student">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,
		#{studentName},#{studentTel},#{studentEmail},#{studentAddress},DEFAULT)
	</insert>
	<update id="updateStudent" parameterType="com.mybatis.model.vo.Student">
		UPDATE STUDENT SET STUDENT_NAME=#{studentName}, 
		STUDENT_TEL=#{studentTel}, STUDENT_EMAIL=#{studentEmail}, 
		STUDENT_ADDR=#{studentAddress} WHERE STUDENT_NO=#{studentNo}
	</update>
	<delete id="deleteStudent" parameterType="_int">
		DELETE FROM STUDENT WHERE STUDENT_NO=#{studentNo}
	</delete>
	
	<!-- 
		select문 실행하기
		<select>태그를 이용하고
		반드시 두개의 속성을 작성하자.!
		1. id -> sql문을 지칭하는 값
		2. resultType or resultMap -> 쿼리문의 실행결과를 반환할 타입을 지정
			resultType : java코드로 작성되어있는 타입(기본, 클래스타입)
			resultMap : mybatis에서 <resultMap>을 이용해서 만든타입
			*컬럼명과 맵핑할 java클래스 필드명이 같으면 resultType 다르면 
			resultMap을 만들어서 직접 맵핑해줌
			클래스간의 연관관계를 설정했을때(has a) 사용
	 -->
	<select id="selectStudentCount" resultType="_int">
		SELECT COUNT(*) FROM STUDENT
	</select>
	
	<!-- 
		vo객체와 resultset의 컬럼명이 불일치할때 resultType에 resultMap을 이용해서 맵핑시켜줄 수 있다.
		<resultMap id="구분" type="">
		id는 primary key / result는 일반컬럼
		<id property="type에 설정된 객체의 필드명" column="resultset컬럼명">
		<result property="type에 설정된 객체의 필드명" column="resultset컬럼명">
		<association>
		<collection> 
	-->
	<resultMap id="studentMap" type="com.mybatis.model.vo.Student">
		<id property="studentNo" column="student_no"/>
		<result property="studentName" column="student_name"/>
		<result property="studentTel" column="student_tel"/>
		<result property="studentEmail" column="student_email"/>
		<result property="studentAddress" column="student_addr"/>
	</resultMap>
	<!-- resultType="com.mybatis.model.vo.Student" -->
	<select id="selectStudent" resultMap="studentMap" parameterType="_int">
	<!--SELECT STUDENT_NO AS STUDENTNO, 
		STUDENT_NAME AS STUDENTNAME,
		STUDENT_TEL AS STUDENTTEL, 
		STUDENT_EMAIL AS STUDENTEMAIL, 
		STUDENT_ADDR AS STUDENTADDRESS,
		REG_DATE -->
		SELECT * FROM STUDENT WHERE STUDENT_NO=#{no}
	</select>
	
	<select id="selectStudentAll" resultMap="studentMap">
		SELECT * FROM STUDENT
	</select>
	<select id="selectStudentByName" resultMap="studentMap" parameterType="string">
		SELECT * FROM STUDENT WHERE STUDENT_NAME LIKE '%'||#{name}||'%'
	</select>
	<select id="selectStudentMap" resultType="map" parameterType="_int">
		SELECT * FROM STUDENT WHERE STUDENT_NO=#{no}
	</select>
	<select id="selectStudentListMap" resultType="map">
		SELECT * FROM STUDENT
	</select>
	<select id="selectStudentPage" resultMap="studentMap">
		<!-- 
			SELECT * FROM (SELECT ROWNUM AS RNUM, S.* FROM())
			기존 OJDBC에서는 페이징 처리시 ROW을 전부 써줘야 했지만 MYBATIS는 중복되는 부분을 제거해서 가장 안쪽에있는 SELECT부분에 쓸 내용만
			작성해주면 알아서 처리해준다. 
		-->
		SELECT * FROM STUDENT ORDER BY STUDENT_NO DESC
	</select>
	
</mapper>
